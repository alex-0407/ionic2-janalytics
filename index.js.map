{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/ionic2-janalytics/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAWA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;IAgCxC,8BAAiB;;;;IAE/C;;;OAGG;;;;;IAEH,yBAAI;;;;;QACF,MAAM,CAAC;KACR;IAGD,qCAAgB;QACd,MAAM,CAAC;KACR;IAGD,qCAAgB;QACd,MAAM,CAAC;KACR;IAGD,gCAAW,aAAC,MAAW;QACrB,MAAM,CAAC;KACR;IAGD,8BAAS,aAAC,MAAW;QACnB,MAAM,CAAC;KACR;IAGD,kCAAa,aAAC,MAAW;QACvB,MAAM,CAAC;KACR;IAGD,sCAAiB,aAAC,MAAW;QAC3B,MAAM,CAAC;KACR;IAGD,kCAAa,aAAC,MAAW;QACvB,MAAM,CAAC;KACR;IAGD,qCAAgB,aAAC,MAAW;QAC1B,MAAM,CAAC;KACR;IAGD,mCAAc,aAAC,MAAW;QACxB,MAAM,CAAC;KACR;IAGD,qCAAgB,aAAC,MAAW;QAC1B,MAAM,CAAC;KACR;;gBA5DF,UAAU;;;QAOR,OAAO,EAAE;;;;0CAGT;;QAEA,OAAO,EAAE;;;;sDAGT;;QAEA,OAAO,EAAE;;;;sDAGT;;QAEA,OAAO,EAAE;;;;iDAGT;;QAEA,OAAO,EAAE;;;;+CAGT;;QAEA,OAAO,EAAE;;;;mDAGT;;QAEA,OAAO,EAAE;;;;uDAGT;;QAEA,OAAO,EAAE;;;;mDAGT;;QAEA,OAAO,EAAE;;;;sDAGT;;QAEA,OAAO,EAAE;;;;oDAGT;;QAEA,OAAO,EAAE;;;;sDAGT;;;;;;;;;;;;;;;;;;;;;;IA3DU,UAAU;QAVtB,MAAM,CAAC;YACN,UAAU,EAAE,YAAY;YACxB,MAAM,EAAE,2BAA2B;;YACnC,SAAS,EAAE,YAAY;;YACvB,IAAI,EAAE,oDAAoD;;YAC1D,OAAO,EAAE,oFAAoF;;YAC7F,gBAAgB,EAAE,CAAC,SAAS,CAAC;;YAC7B,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,UAAU,EA4DtB;qBAxGD;EA4CgC,iBAAiB;SAApC,UAAU","sourcesContent":["/**\n * This is a template for new plugin wrappers\n *\n * TODO:\n * - Add/Change information below\n * - Document usage (importing, executing main functionality)\n * - Remove any imports that you are not using\n * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added\n * - Remove this note\n *\n */\nimport { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name jAnalytics\n * @description\n * This plugin does something\n *\n * @usage\n * ```typescript\n * import { JAnalytics } from '@ionic-native/JAnalytics';\n *\n *\n * constructor(private jAnalytics: JAnalytics) { }\n *\n * ...\n *\n *\n * this.jAnalytics.functionName('Hello', 123)\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'JAnalytics',\n  plugin: 'cordova-plugin-janalytics', // npm package name, example: cordova-plugin-janalytics\n  pluginRef: 'JAnalytics', // the variable reference to call the plugin, example: navigator.janalytics\n  repo: 'https://github.com/jpush/cordova-plugin-janalytics', // the github repository URL for the plugin\n  install: 'ionic cordova plugin add cordova-plugin-janalytics --variable APP_KEY=YOUR_APP_KEY', // OPTIONAL install command, in case the plugin requires variables\n  installVariables: ['APP_KEY'], // OPTIONAL the plugin requires variables\n  platforms: ['Android', 'iOS'] // Array of platforms supported, example: ['Android', 'iOS']\n})\n@Injectable()\nexport class JAnalytics extends IonicNativePlugin {\n\n  /**\n   * This function does something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  init(): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  initCrashHandler(): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  stopCrashHandler(): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  onPageStart(params: any): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  onPageEnd(params: any): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  addCountEvent(params: any): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  addCalculateEvent(params: any): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  addLoginEvent(params: any): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  addRegisterEvent(params: any): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  addBrowseEvent(params: any): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  @Cordova()\n  addPurchaseEvent(params: any): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n}\n"]}